# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv;
            . venv/bin/activate;
            pip install --upgrade pip;
            pip install -r requirements.txt;
            pip install -e .
            
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: create topology cnn
          command: |
            mkdir .DATASETS;
            printf "Input(28,28,1);\nConv(32,5,tanh);\nPool(2,max);\nConv(64,3,relu);\nBatchNorm();\nPool(2,max);\nDropout(50);\nConv(128,2,tanh);\nPool(2,max);\nFc(1024,relu);\nBatchNorm();\nDropout(50);\nFc(10,softmax);">top.txt;
      - store_artifacts:
          path: ~/repo/.DATASETS
      
      - store_artifacts:
          path: top.txt
      
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python nntool/tests/test_simple.py
